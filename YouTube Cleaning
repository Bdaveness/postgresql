-- Create copy of table for working
DROP TABLE IF EXISTS layoffs_staging;
CREATE TABLE layoffs_staging AS
TABLE layoffs;

-- REMOVE DUPLICATES
	-- Create CTE with an window function to find duplicates.  Dupicates are ones where row_num is > 1, showing there is more than 
	-- one record for the partitioned columns.
WITH duplicate_cte AS 
(
SELECT *,
ROW_NUMBER() OVER(PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, date, stage, country,
					funds_raised_millions) AS row_num
FROM layoffs
)

SELECT *
FROM duplicate_cte
WHERE row_num > 1;

	-- Create id column to easily delete duplicate row
ALTER TABLE layoffs_staging
ADD COLUMN id INT GENERATED ALWAYS AS IDENTITY;

DELETE FROM layoffs_staging t1
USING layoffs_staging t2
WHERE t1.id > t2.id AND (t1.company = t2.company AND t1.date = t2.date);


-- Standardize Data
 	--Delete white space by using TRIM function
UPDATE layoffs_staging
SET company = TRIM(company);

	--Update industry column to change Crypto, CryptoCurrency, and Crypto Currency to just Crypto
UPDATE layoffs_staging
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

	--Delete trailing period from country column
UPDATE layoffs_staging
SET country = TRIM(TRAILING '.' FROM country);

-- Null and Blank Values
	--Find which company has blank or null values in industry column for one row but has data for same company in different row
SELECT t1.company, t2.company, t1.industry, t2.industry
FROM layoffs_staging t1
JOIN layoffs_staging t2
	ON t1.company = t2.company
WHERE (t1.industry IS NULL OR t1.industry = ' ') AND t2.industry IS NOT NULL
	
	--Fill in blank industry column if another row has industry data for the same company
UPDATE layoffs_staging t1
SET industry = t2.industry
FROM layoffs_staging t2
WHERE t1.company = t2.company AND ((t1.industry IS NULL OR t1.industry = ' ') AND t2.industry IS NOT NULL);

-- Remove Any Columns
	--Delete rows that have nulls for total_laid_off and percentage_laid_off because it does not help us analyze layoffs if
	--there were no layoffs or no layoffs data
DELETE
FROM layoffs_staging
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

	--Delete id column because it is not part of original data and only added to delete duplicates
ALTER TABLE layoffs_staging
DROP COLUMN id;
